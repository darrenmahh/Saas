# 数据源集合
dataSources:
  ds_0:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://117.72.194.193:3306/link?useUnicode=true&characterEncoding=UTF-8&rewriteBatchedStatements=true&allowMultiQueries=true&serverTimezone=Asia/Shanghai&useSSL=false&allowPublicKeyRetrieval=true
    username: root
    password: mysqlmima0210
    # HikariCP 核心配置
    poolName: Hikari-Admin
    maximumPoolSize: 10
    minimumIdle: 5
    connectionTimeout: 60000
    idleTimeout: 600000
    maxLifetime: 1800000
    keepaliveTime: 300000
    autoCommit: true
    connectionInitSql: SELECT 1
    # 移除或增大 leakDetectionThreshold
    # leakDetectionThreshold: 0  # 设置为 0 表示禁用检测（推荐）
    # 或者设置更大的值，比如 300000（5分钟）
    # 连接测试查询，防止使用已关闭的连接
    connectionTestQuery: SELECT 1
    # 验证连接的超时时间
    validationTimeout: 5000
    # 连接泄露检测阈值（可选）
    # leakDetectionThreshold: 30000

rules:
  - !SHARDING
    tables:
      t_user:
        # 真实数据节点，比如数据库源以及数据库在数据库中真实存在的
        actualDataNodes: ds_0.t_user_${0..15}
        # 分表策略
        tableStrategy:
          # 用于单分片键的标准分片场景
          standard:
            # 分片键
            shardingColumn: username
            # 分片算法，对应 rules[0].shardingAlgorithms
            shardingAlgorithmName: user_table_hash_mod
        # 添加主键生成策略
        keyGenerateStrategy:
          column: id
          keyGeneratorName: snowflake
      t_group:
        actualDataNodes: ds_0.t_group_${0..15}
        tableStrategy:
          standard:
            shardingColumn: username
            shardingAlgorithmName: group_table_hash_mod
    # 分片算法
    shardingAlgorithms:
      # 数据表分片算法
      user_table_hash_mod:
        # 根据分片键 Hash 分片
        type: HASH_MOD
        # 分片数量
        props:
          sharding-count: 16
      group_table_hash_mod:
        type: HASH_MOD
        props:
          sharding-count: 16
    # 添加主键生成器
    keyGenerators:
      snowflake:
        type: SNOWFLAKE
        props:
          worker-id: 1
  - !ENCRYPT
    # 需要加密的表集合
    tables:
      # 用户表
      t_user:
        # 用户表中哪些字段需要进行加密
        columns:
          # 手机号字段，逻辑字段，不一定是在数据库中真实存在
          phone:
            # 手机号字段存储的密文字段，这个是数据库中真实存在的字段
            cipherColumn: phone
            # 身份证字段加密算法
            encryptorName: common_encryptor
          mail:
            cipherColumn: mail
            encryptorName: common_encryptor
        # 是否按照密文字段查询
        queryWithCipherColumn: true

    # 加密算法
    encryptors:
      # 自定义加密算法名称
      common_encryptor:
        # 加密算法类型
        type: AES
        props:
          # AES 加密密钥
          aes-key-value: d6oadClrrb9A3GWo
# 展现逻辑 SQL & 真实 SQL
props:
  sql-show: true